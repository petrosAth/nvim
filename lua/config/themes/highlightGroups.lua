local M = {}

---Set the highlights based on the given color palette
---@param palette table The values must be a hexadecimal string
function M.load(palette)
    local p = palette
    local g = {}

    g.editor = {
        Normal = { fg = p.cFg, bg = p.cBg },
        NormalNC = { fg = p.cFg, bg = p.cBgDim },
        NormalFloat = { fg = p.cFg, bg = p.cBgDark },
        FloatBorder = { fg = p.cFill2, bg = p.cBgDark },
        ColorColumn = { bg = p.cBgDim },
        Cursor = { reverse = true },
        lCursor = { link = "Cursor" },
        CursorIM = { link = "Cursor" },
        TermCursor = { link = "Cursor" },
        TermCursorNC = { link = "Cursor" },
        MatchParen = { fg = p.cViolet, bg = p.cFill5, bold = true },
        NonText = { fg = p.cFill3, bg = p.none },
        Conceal = { fg = p.none, bg = p.none },
        Whitespace = { fg = p.cFill3, bg = p.none },
        Pmenu = { fg = p.cFg, bg = p.cBgDark },
        PmenuSel = { fg = p.cCyan, bg = p.cFill4 },
        PmenuSbar = { fg = p.cFg, bg = p.cFill1 },
        PmenuThumb = { fg = p.cCyan, bg = p.cFill3 },
        SpecialKey = { fg = p.cFill4, bg = p.none },
        SpellBad = { bg = p.none, sp = p.cRed, underdotted = true },
        SpellCap = { bg = p.none, sp = p.cYellow, underdotted = true },
        SpellLocal = { bg = p.none, sp = p.cFg, underdotted = true },
        SpellRare = { bg = p.none, sp = p.cFgLight, underdotted = true },
        Visual = { bg = p.cFill4 },
        VisualNOS = { fg = p.none, bg = p.cFill4 },
        Folded = { fg = p.cFill4, bg = p.none },
        FoldColumn = { fg = p.cFill4, bg = p.none },
        SignColumn = { fg = p.cFill2, bg = p.none },
        LineNrAbove = { link = "LineNr" },
        LineNr = { fg = p.cFill4, bg = p.none },
        LineNrBelow = { link = "LineNr" },
        CursorLineNr = { fg = p.cFg, bg = p.cFill1 },
        CursorLine = { fg = p.none, bg = p.cFill1 },
        CursorColumn = { link = "CursorLine" },
        CursorLineSign = { link = "SignColumn" },
        CursorLineFold = { link = "FoldColumn" },
        Directory = { fg = p.cCyan, bg = p.none },
        EndOfBuffer = { fg = p.cFill2, bg = p.none },
        ErrorMsg = { fg = p.cFg, bg = p.cRed },
        ModeMsg = { fg = p.cFg, bg = p.none, bold = true },
        MoreMsg = { fg = p.cYellow, bg = p.none },
        MsgArea = { link = "Normal" },
        WarningMsg = { fg = p.cYellow, bg = p.cBg, reverse = true },
        MsgSeparator = { fg = p.cFg, bg = p.cFill1 },
        Question = { fg = p.cFg, bg = p.none },
        StatusLine = { fg = p.cFg, bg = p.cFill2 },
        StatusLineNC = { fg = p.cFgDim, bg = p.cFill2 },
        StatusLineTerm = { link = "StatusLine" },
        StatusLineTermNC = { link = "StatusLineNC" },
        WinBar = { fg = p.cFg, bg = p.cFill1 },
        WinBarNC = { fg = p.cFg, bg = p.cFill1 },
        WildMenu = { fg = p.cFill2, bg = p.cCyan },
        Search = { fg = p.cCyan, bg = p.cBg, reverse = true },
        IncSearch = { fg = p.cFgLight, bg = p.cSelect, underline = true },
        CurSearch = { fg = p.cFgLight, bg = p.cSelect, underline = true },
        Substitute = { fg = p.cFgLight, bg = p.cBg, reverse = true },
        TabLine = { fg = p.cFg, bg = p.cFill2 },
        TabLineSel = { fg = p.cFg, bg = p.cFill5 },
        TabLineFill = { fg = p.cFgDim, bg = p.cFill3 },
        Title = { fg = p.cFg, bg = p.none },
        WinSeparator = { fg = p.cFill2, bg = p.cBgDim },
        VertSplit = { link = "WinSeparator" },
        QuickFixLine = { fg = p.cBg, bg = p.cCyan },
        DiffText = { sp = p.cYellowDim, underdashed = true },
        DiffAdd = { bg = p.cGreenDim },
        DiffChange = { bg = p.cYellowDim },
        DiffDelete = { bg = p.cRedDim },
        diffAdded = { link = "DiffAdd" },
        diffChanged = { link = "DiffChange" },
        diffRemoved = { link = "DiffDelete" },
        Yank = { fg = p.cFgLight, bg = p.cSelect },
    }

    g.syntax = {
        Comment = { fg = p.cFill5 },

        Constant = { fg = p.cFgLight },
        String = { fg = p.cGreen, italic = true },
        Character = { fg = p.cGreen },
        Number = { fg = p.cMagenta },
        Boolean = { fg = p.cBlue, bold = true },
        Float = { fg = p.cMagenta },

        Identifier = { fg = p.cFg },
        Function = { fg = p.cCyan, italic = true },

        Statement = { fg = p.cBlue },
        Conditional = { fg = p.cBlue, italic = true },
        Repeat = { fg = p.cBlue },
        Label = { fg = p.cBlue },
        Operator = { fg = p.cBlue },
        Keyword = { fg = p.cBlue, italic = true },
        Exception = { fg = p.cBlue },

        PreProc = { fg = p.cBlue },
        Include = { fg = p.cBlue },
        Define = { fg = p.cBlue },
        Macro = { link = "Define" },
        PreCondit = { link = "PreProc" },

        Type = { fg = p.cBlue },
        StorageClass = { fg = p.cBlue },
        Structure = { fg = p.cBlue },
        Typedef = { fg = p.cBlue },

        Special = { fg = p.cFg },
        SpecialChar = { fg = p.cYellow },
        Tag = { fg = p.cFg },
        Delimiter = { fg = p.cFgLight },
        SpecialComment = { fg = p.cCyan, italic = true },
        Debug = { fg = p.cRed },

        Underlined = { fg = p.cGreen, underline = true },
        Ignore = { fg = p.cFill2 },
        Error = { fg = p.cRed, bg = p.none, bold = true, underline = true },
        Todo = { fg = p.cYellow, bg = p.none },
    }

    g.lsp = {
        -- DocumentHighlight
        LspReferenceText = { link = "Visual" },
        LspReferenceRead = { link = "Visual" },
        LspReferenceWrite = { link = "Visual" },
        -- Neovim LspSignatureHelp
        LspSignatureActiveParameter = { link = "Search" },
        -- lspinfo window
        LspInfoBorder = { link = "FloatBorder" },
    }

    g.diagnostic = {
        DiagnosticError = { fg = p.cRed },
        DiagnosticWarn = { fg = p.cYellow },
        DiagnosticInfo = { fg = p.cCyan },
        DiagnosticHint = { fg = p.cSelect },
        DiagnosticSignError = { link = "DiagnosticError" },
        DiagnosticSignWarn = { link = "DiagnosticWarn" },
        DiagnosticSignInfo = { link = "DiagnosticInfo" },
        DiagnosticSignHint = { link = "DiagnosticHint" },
        DiagnosticFloatingWarn = { link = "DiagnosticError" },
        DiagnosticFloatingError = { link = "DiagnosticWarn" },
        DiagnosticFloatingInfo = { link = "DiagnosticInfo" },
        DiagnosticFloatingHint = { link = "DiagnosticHint" },
        DiagnosticUnderlineError = { underline = true, sp = p.cRed },
        DiagnosticUnderlineWarn = { underline = true, sp = p.cYellow },
        DiagnosticUnderlineInfo = { underline = true, sp = p.cCyan },
        DiagnosticUnderlineHint = { underline = true, sp = p.cSelect },
        DiagnosticVirtualTextError = { fg = p.cRed, bold = true, italic = true },
        DiagnosticVirtualTextWarn = { fg = p.cYellow, bold = true, italic = true },
        DiagnosticVirtualTextInfo = { fg = p.cCyan, bold = true, italic = true },
        DiagnosticVirtualTextHint = { fg = p.cSelect, bold = true, italic = true },
    }

    g.plugins = {
        -- alpha-nvim
        AlphaButtons = { fg = p.cFg },
        AlphaButtonShortcuts = { fg = p.cCyan },
        AlphaHeader = { fg = p.cBlue },
        AlphaFooter = { fg = p.cFill5 },

        -- diffview.nvim
        DiffviewVertSplit = { fg = p.cFill2, bg = p.cYellow },
        DiffviewWinSeparator = { link = "DiffviewVertSplit" },

        -- gitsigns.nvim
        GitSignsCurrentLineBlame = { fg = p.cMagenta, bold = true, italic = true },
        GitSignsAdd = { fg = p.cGreen },
        GitSignsAddNr = { fg = p.cGreen, bg = p.cFill2 },
        GitSignsAddLn = { bg = p.cGreenDark },
        GitSignsChange = { fg = p.cYellow },
        GitSignsChangeNr = { fg = p.cYellow, bg = p.cFill2 },
        GitSignsChangeLn = { bg = p.cYellowDark },
        GitSignsDelete = { fg = p.cRed },
        GitSignsDeleteNr = { fg = p.cRed, bg = p.cFill2 },
        GitSignsDeleteLn = { bg = p.cRedDark },
        GitSignsAddInline = { bg = p.cGreenDim },
        GitSignsChangeInline = { bg = p.cYellowDim },
        GitSignsDeleteInline = { bg = p.cRedDim },

        -- incline.nvim
        InclineNormal = { fg = p.nord5, bg = p.cFill4 },
        InclineNormalNC = { link = "InclineNormal" },

        -- indent-blankline.nvim
        IndentBlanklineContextChar = { fg = p.cViolet, bg = p.none },
        IndentBlanklineContextStart = { fg = p.none, bg = p.none, underline = true, sp = p.cViolet },
        IndentBlanklineSpaceCharBlankline = { fg = p.cFill2, bg = p.none },
        IndentBlanklineSpaceChar = { fg = p.cFill2, bg = p.none },
        IndentBlanklineChar = { fg = p.cFill2, bg = p.none },

        -- hop.nvim
        HopNextKey = { fg = p.cCyan, bg = p.none, bold = true },
        HopNextKey1 = { fg = p.cCyan, bg = p.none },
        HopNextKey2 = { fg = p.cFg, bg = p.none },
        HopUnmatched = { fg = p.cFill4, bg = p.none },

        -- mini.nvim
        MiniCursorword = { link = "Visual" },
        MiniCursorwordCurrent = { bold = true },

        -- nvim-cmp
        CmpGhostText = { fg = p.cFill5, bold = true },

        CmpItemMenu = { fg = p.cFill5 },

        CmpItemAbbr = { fg = p.cFg },
        CmpItemAbbrDeprecated = { fg = p.cOrange, strikethrough = true },
        CmpItemAbbrMatch = { fg = p.cSelect, bold = true },
        CmpItemAbbrMatchFuzzy = { link = "CmpItemAbbrMatch" },

        CmpItemKind = { link = "Normal" },
        CmpItemKindTypeParameter = { link = "TSParameter" },
        CmpItemKindConstructor = { link = "TSConstructor" },
        CmpItemKindEnum = { link = "Structure" },
        CmpItemKindEnumMember = { link = "Structure" },
        CmpItemKindReference = { link = "TSParameterReference" },
        CmpItemKindInterface = { link = "StorageClass" },
        CmpItemKindClass = { link = "StorageClass" },
        CmpItemKindVariable = { link = "TSVariable" },
        CmpItemKindProperty = { link = "TSProperty" },
        CmpItemKindOperator = { link = "TSOperator" },
        CmpItemKindFunction = { link = "TSFunction" },
        CmpItemKindConstant = { link = "TSConstant" },
        CmpItemKindSnippet = { fg = p.cGreen },
        CmpItemKindKeyword = { link = "TSKeyword" },
        CmpItemKindStruct = { link = "Structure" },
        CmpItemKindModule = { link = "TSNamespace" },
        CmpItemKindMethod = { link = "TSMethod" },
        CmpItemKindFolder = { link = "Directory" },
        CmpItemKindFile = { link = "Directory" },
        CmpItemKindValue = { link = "TSKeyword" },
        CmpItemKindField = { link = "TSField" },
        CmpItemKindUnit = { link = "TSNumber" },
        CmpItemKindText = { link = "TSText" },

        -- nvim-hlslens
        HlSearchNear = { link = "IncSearch" },
        HlSearchLensNear = { fg = p.cFg, bg = p.none, reverse = true },
        HlSearchLens = { fg = p.cFill5, bg = p.none, reverse = true },
        HlSearchFloat = { link = "IncSearch" },

        -- nvim-notify
        NotifyERRORTitle = { fg = p.cRed, bg = p.cBgDark },
        NotifyWARNTitle = { fg = p.cYellow, bg = p.cBgDark },
        NotifyINFOTitle = { fg = p.cCyan, bg = p.cBgDark },
        NotifyDEBUGTitle = { fg = p.cOrange, bg = p.cBgDark },
        NotifyTRACETitle = { fg = p.cSelect, bg = p.cBgDark },
        NotifyERRORIcon = { fg = p.cRed, bg = p.cBgDark },
        NotifyWARNIcon = { fg = p.cYellow, bg = p.cBgDark },
        NotifyINFOIcon = { fg = p.cCyan, bg = p.cBgDark },
        NotifyDEBUGIcon = { fg = p.cOrange, bg = p.cBgDark },
        NotifyTRACEIcon = { fg = p.cSelect, bg = p.cBgDark },
        NotifyERRORBorder = { link = "FloatBorder" },
        NotifyWARNBorder = { link = "FloatBorder" },
        NotifyINFOBorder = { link = "FloatBorder" },
        NotifyDEBUGBorder = { link = "FloatBorder" },
        NotifyTRACEBorder = { link = "FloatBorder" },
        NotifyERRORBody = { link = "NormalFloat" },
        NotifyWARNBody = { link = "NormalFloat" },
        NotifyINFOBody = { link = "NormalFloat" },
        NotifyDEBUGBody = { link = "NormalFloat" },
        NotifyTRACEBody = { link = "NormalFloat" },

        -- nvim-scrollbar
        ScrollBarHandle = { fg = p.none, bg = p.cFill3 },
        ScrollBarError = { link = "DiagnosticError" },
        ScrollBarWarn = { link = "DiagnosticWarn" },
        ScrollBarInfo = { link = "DiagnosticInfo" },
        ScrollBarHint = { link = "DiagnosticHint" },
        ScrollBarMisc = { fg = p.cFg, bg = p.none },
        ScrollBarSearch = { link = "Search" },

        -- nvim-ts-rainbow
        rainbowcol1 = { fg = p.cSelect, bg = p.none },
        rainbowcol2 = { fg = p.cRed, bg = p.none },
        rainbowcol3 = { fg = p.cYellow, bg = p.none },
        rainbowcol4 = { fg = p.cGreen, bg = p.none },
        rainbowcol5 = { fg = p.cMagenta, bg = p.none },
        rainbowcol6 = { fg = p.cViolet, bg = p.none },
        rainbowcol7 = { fg = p.cFg, bg = p.none },

        --nvim-windowpicker
        WindowPicker = { fg = p.cBgDark, bg = p.cSelect, bold = true },
        WindowPickerNC = { fg = p.cBgDark, bg = p.cSelect, bold = true },

        -- neo-tree.nvim
        NeoTreeNormal = { link = "Normal" },
        NeoTreeNormalNC = { link = "NormalNC" },
        NeoTreePreview = { fg = p.cFg, bg = p.cFill5 },
        NeoTreeFloatBorder = { fg = p.cFill3, bg = p.cBg },
        NeoTreeFloatTitle = { fg = p.cCyan, bg = p.cFill3, bold = true },

        NeoTreeTabActive = { fg = p.cFg, bg = p.cFill5 },
        NeoTreeTabInactive = { fg = p.cFg, bg = p.cFill3 },
        NeoTreeTabBarBackground = { link = "StatusLine" },
        NeoTreeTabSeparatorActive = { fg = p.cFill4, bg = p.cFill5 },
        NeoTreeTabSeparatorInactive = { fg = p.cFill2, bg = p.cFill3 },

        NeoTreeRootName = { fg = p.cFgLight, bg = p.none, bold = true, italic = true },
        NeoTreeIndentMarker = { link = "FoldColumn" },
        NeoTreeFileNameOpened = { bold = true, nocombine = true },
        NeoTreeBufferNumber = { fg = p.cFgLight, bg = p.none },
        NeoTreeDotfile = { fg = p.cFill5, bg = p.none },
        NeoTreeSymbolicLinkTarget = { fg = p.cViolet, bg = p.none, bold = true },

        NeoTreeMessage = { fg = p.cMagenta, bg = p.none },
        NeoTreeDimText = { fg = p.cFill4, bg = p.none },
        NeoTreeFadeText1 = { link = "NeoTreeDotfile" },
        NeoTreeFadeText2 = { link = "NeoTreeDimText" },

        NeoTreeModified = { link = "GitSignsChange" },
        NeoTreeGitAdded = { link = "GitSignsAdd" },
        NeoTreeGitModified = { link = "GitSignsChange" },
        NeoTreeGitDeleted = { link = "GitSignsDelete" },
        NeoTreeGitRenamed = { link = "NeoTreeGitModified" },
        NeoTreeGitUntracked = { fg = p.cSelect, bg = p.none },
        NeoTreeGitIgnored = { link = "NeoTreeDotfile" },
        NeoTreeGitUnstaged = { link = "NeoTreeGitModified" },
        NeoTreeGitStaged = { link = "NeoTreeGitAdded" },
        NeoTreeGitConflict = { fg = p.cOrange, bg = p.none },

        -- quickscope.lua
        QuickScopePrimary = { fg = p.cYellow, bg = p.cBg, underline = true, nocombine = true },
        QuickScopeSecondary = { fg = p.cMagenta, bg = p.cBg, bold = true, nocombine = true },

        -- satellite.nvim
        ScrollView = { fg = p.none, bg = p.cFill4 },
        SearchSV = { fg = p.cCyan, bg = p.none },

        -- telescope.nvim
        TelescopePromptPrefix = { fg = p.cFg, bg = p.none, bold = true },
        TelescopePromptCounter = { fg = p.cViolet, bg = p.none, bold = true },

        TelescopeNormal = { fg = p.cFg, bg = p.cBgDark },
        TelescopeResultsNormal = { fg = p.cBlue, bg = p.none },
        TelescopePreviewNormal = { fg = p.cFg, bg = p.cBg },
        TelescopePromptNormal = { fg = p.cFgLight, bg = p.cBg },

        TelescopeResultsTitle = { fg = p.cCyan, bg = p.cFill3, bold = true },
        TelescopePreviewTitle = { fg = p.cBlue, bg = p.cFill3, bold = true },
        TelescopePromptTitle = { fg = p.cFg, bg = p.cFill3, bold = true },

        TelescopeResultsBorder = { fg = p.cFill3, bg = p.none },
        TelescopePreviewBorder = { fg = p.cFill3, bg = p.cBg },
        TelescopePromptBorder = { fg = p.cFill3, bg = p.cBg },

        TelescopeMultiSelection = { fg = p.cFgLight, bg = p.cFill3 },
        TelescopeMultiIcon = { fg = p.cFgLight, bg = p.cFill3 },
        TelescopselectionCaret = { fg = p.cCyan, bg = p.cFill2 },
        Telescopselection = { link = "Telescop.cSelectionCaret" },
        TelescopeMatching = { fg = p.cFgLight, bg = p.none },

        -- todo-comments.nvim
        TodoBgFIX = { fg = p.cFgLight, bg = p.cRed, bold = true },
        TodoFgFIX = { link = "DiagnosticError" },
        TodoSignFIX = { link = "DiagnosticError" },
        TodoBgNOTE = { fg = p.cFgLight, bg = p.cSelect, bold = true },
        TodoFgNOTE = { link = "DiagnosticHint" },
        TodoSignNOTE = { link = "DiagnosticHint" },
        TodoBgWARN = { fg = p.cFgLight, bg = p.cYellow, bold = true },
        TodoFgWARN = { link = "DiagnosticWarn" },
        TodoSignWARN = { link = "DiagnosticWarn" },
        TodoBgPERF = { fg = p.cFgLight, bg = p.cGreen, bold = true },
        TodoFgPERF = { fg = p.cGreen, bg = p.none },
        TodoSignPERF = { fg = p.cGreen, bg = p.none },
        TodoBgTODO = { fg = p.cFgLight, bg = p.cCyan, bold = true },
        TodoFgTODO = { link = "DiagnosticInfo" },
        TodoSignTODO = { link = "DiagnosticInfo" },
        TodoBgHACK = { fg = p.cFgLight, bg = p.cYellow, bold = true },
        TodoFgHACK = { link = "DiagnosticWarn" },
        TodoSignHACK = { link = "DiagnosticWarn" },

        -- vim-illuminate
        IlluminatedWordText = { link = "LspReferenceText" },
        IlluminatedWordRead = { link = "LspReferenceRead" },
        IlluminatedWordWrite = { link = "LspReferenceWrite" },

        -- which-key.nvim
        WhichKey = { fg = p.cFg, bg = p.none, bold = true },
        WhichKeyBorder = { link = "FloatBorder" },
        WhichKeyGroup = { fg = p.cSelect, bg = p.none, bold = true },
        WhichKeyDesc = { fg = p.cBlue, bg = p.none },
        WhichKeySeparator = { fg = p.cFill4, bg = p.none },
        WhichKeyValue = { link = "Comment" },
        WhichKeyFloat = { link = "NormalFloat" },

        -- hydra.nvim
        HydraHint = { link = "NormalFloat" },
        HydraAmaranth = { fg = p.cOrange, bg = p.none },
        HydraTeal = { fg = p.cViolet, bg = p.none },
        HydraPink = { fg = p.cMagenta, bg = p.none },
        HydraBlue = { fg = p.cSelect, bg = p.none },
        HydraRed = { fg = p.cRed, bg = p.none },
    }

    g.statusBars = {
        ModeInactive = { fg = p.cFill2, bg = p.cCyan },
        ModeVisual = { fg = p.cFill2, bg = p.cYellow },
        ModeReplace = { fg = p.cFill2, bg = p.cRed },
        ModeNormal = { fg = p.cFill2, bg = p.cCyan },
        ModeInsert = { fg = p.cFill2, bg = p.cFgLight },
        ModeCommand = { fg = p.cFill2, bg = p.cViolet },
        ModeTerminal = { fg = p.cFill2, bg = p.cOrange },
        ModeHydra = { fg = p.cFill2, bg = p.cMagenta },
        StatusLineLight = { fg = p.cFg, bg = p.cFill4 },
        WinBarLight = { fg = p.cFg, bg = p.cFill3 },
        WinBarCurrent = { fg = p.cFgLight, bg = p.cFill5 },
        WinBarSpecial = { fg = p.cFg, bg = p.cFill1, bold = true },
        WinBarCurrentSpecial = { fg = p.cFgLight, bg = p.cFill5, bold = true },
        WinBarModifiedCurrent = { fg = p.cFill1, bg = p.cYellow },
        WinBarModifiedInactive = { fg = p.cYellow, bg = p.cFill1 },
        WinBarWindowNumber = { fg = p.cFgLight },
        TabLine = { fg = p.cFg, bg = p.cFill2 },
        TabLineSel = { fg = p.cFg, bg = p.cFill5 },
        TabLineFill = { fg = p.cFgDim, bg = p.cFill3 },
        TabLineHeader = { fg = p.cFill2, bg = p.cCyan },
        TabLineTabSeparator = { fg = p.cFg, bg = p.cFill4 },
        TabLineTabSeparatorSel = { fg = p.cFill2, bg = p.cCyan },
        TabLineTabIndicator = { fg = p.cFg, bg = p.cFill4 },
        TabLineTabIndicatorSel = { fg = p.cFill2, bg = p.cCyan },
        TabLineIndicatorModified = { fg = p.cFill2, bg = p.cFill3 },
        TabLineIndicatorModifiedSel = { fg = p.cFill2, bg = p.cFill5 },
        TabLineIndicatorIsModified = { fg = p.cYellow, bg = p.cFill3 },
        TabLineIndicatorIsModifiedSel = { fg = p.cYellow, bg = p.cFill5 },
    }

    g.treesitter = {
        TSComment = { link = "Comment" },
        TSConstant = { link = "Constant" },
        TSConstBuiltin = { link = "Constant" },
        TSConstMacro = { link = "Constant" },
        TSField = { fg = p.cFg },
        TSString = { link = "String" },
        TSStringRegex = { link = "SpecialChar" },
        TSStringEscape = { fg = p.cMagenta },
        TSStringSpecial = { link = "Special" },
        TSCharacter = { link = "Character" },
        TSCharacterSpecial = { link = "Special" },
        TSText = { fg = p.cFg },
        TSTextReference = { fg = p.cMagenta },
        TSLiteral = { fg = p.cFg },
        TSNumber = { link = "Number" },
        TSBoolean = { link = "Boolean" },
        TSFloat = { link = "Float" },
        TSNamespace = { fg = p.cFg, italic = true },
        TSVariable = { link = "Identifier" },
        TSVariableBuiltin = { link = "Keyword" },
        TSFunction = { link = "Function" },
        TSFuncBuiltin = { link = "Function" },
        TSFuncMacro = { link = "Function" },
        TSConditional = { link = "Conditional" },
        TSRepeat = { link = "Repeat" },
        TSLabel = { link = "Label" },
        TSOperator = { link = "Operator" },
        TSKeyword = { link = "Keyword" },
        TSKeywordFunction = { link = "Keyword" },
        TSKeywordReturn = { link = "Keyword" },
        TSKeywordOperator = { link = "Keyword" },
        TSException = { link = "Exception" },
        TSInclude = { fg = p.cBlue },
        TSMethod = { fg = p.cViolet, italic = true },
        TSConstructor = { fg = p.cBlue },
        TSProperty = { fg = p.cSelect, italic = true },
        TSType = { link = "Type" },
        TSTypeBuiltin = { link = "Type" },
        TSStructure = { link = "Structure" },
        TSPunctDelimiter = { fg = p.cCyan },
        TSPunctBracket = { fg = p.cCyan },
        TSPunctSpecial = { fg = p.cCyan },
        TSTag = { link = "Tag" },
        TSTagAttribute = { link = "TSTag" },
        TSTagDelimiter = { link = "TSTag" },
        TSAnnotation = { link = "Annotation" },
        TSEmphasis = { italic = true },
        TSStrong = { bold = true },
        TSUnderline = { underline = true },
        TSStrike = { strikethrough = true },
        -- TSError              = { link = "Error" },
        TSAttribute = { fg = p.cMagenta },
        TSParameter = { fg = p.cSelect },
        TSParameterReference = { fg = p.cSelect },
        TSSymbol = { fg = p.cMagenta },
        TSTitle = { fg = p.cBlue, bold = true },
        TSURI = { fg = p.cSelect },
        TSDebug = { link = "Debug" },
        TSDefine = { link = "Define" },
        -- TSNone = { },
        TSPreProc = { link = "PreProc" },
        TSStorageClass = { link = "StorageClass" },
        TSMath = { link = "Number" },
        -- TSEnvironment = { },
        -- TSEnvironmentName = { },
        TSNote = { link = "DiagnosticHint" },
        TSWarning = { link = "DiagnosticWarn" },
        TSDanger = { link = "DiagnosticError" },
    }

    for _, highlightGroups in pairs(g) do
        for group, highlightName in pairs(highlightGroups) do
            vim.api.nvim_set_hl(0, group, highlightName)
        end
    end
end

return M
